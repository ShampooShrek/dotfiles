return {
  -- "folke/edgy.nvim",
  -- event = "VeryLazy",
  -- keys = {
  --   {
  --     "<leader>e",
  --     function()
  --       local edgy = require("edgy")
  --       edgy.toggle()
  --       vim.defer_fn(function()
  --         -- Executa Ctrl+j
  --         vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<leader>fe", true, false, true), "n", false)
  --       end, 50)
  --     end,
  --     desc = "Edgy Toggle",
  --   },
  --   -- stylua: ignore
  --   { "<leader>uE", function() require("edgy").select() end, desc = "Edgy Select Window" },
  -- },
  -- opts = function(_, opts)
  --   opts = {
  --     animate = { enable = false },
  --     wo = { spell = false, winhighlight = "" },
  --     bottom = {
  --       {
  --         ft = "toggleterm",
  --         size = { height = 0.4 },
  --         filter = function(buf, win)
  --           return vim.api.nvim_win_get_config(win).relative == ""
  --         end,
  --       },
  --       {
  --         ft = "noice",
  --         size = { height = 0.4 },
  --         filter = function(buf, win)
  --           return vim.api.nvim_win_get_config(win).relative == ""
  --         end,
  --       },
  --       "Trouble",
  --       { ft = "qf", title = "QuickFix" },
  --       {
  --         ft = "help",
  --         size = { height = 20 },
  --         -- don't open help files in edgy that we're editing
  --         filter = function(buf)
  --           return vim.bo[buf].buftype == "help"
  --         end,
  --       },
  --       { title = "Spectre", ft = "spectre_panel", size = { height = 0.4 } },
  --       { title = "Neotest Output", ft = "neotest-output-panel", size = { height = 15 } },
  --     },
  --     left = {
  --       -- { title = "Neotest Summary", ft = "neotest-summary" },
  --       {
  --         title = "Neotest Summary",
  --         ft = "neotest-summary",
  --         -- filter = function(buf)
  --         --   return vim.b[buf].neo_tree_source == "neotest-summary"
  --         -- end,
  --         pinned = true,
  --         open = "Neotest summary open",
  --       },
  --     },
  --     keys = {
  --       -- increase width
  --       ["<c-Right>"] = function(win)
  --         win:resize("width", 2)
  --       end,
  --       -- decrease width
  --       ["<c-Left>"] = function(win)
  --         win:resize("width", -2)
  --       end,
  --       -- next open window
  --       -- ["<C-j>"] = function(win)
  --       --   win:next({ visible = true, focus = true })
  --       -- end,
  --       ["<c-j>"] = function(win)
  --         win:next({ pinned = false, focus = true })
  --       end,
  --       -- prev loaded window
  --       ["<c-k>"] = function(win)
  --         win:prev({ pinned = false, focus = true })
  --       end,
  --       -- increase height
  --       ["<c-Up>"] = function(win)
  --         win:resize("height", 2)
  --       end,
  --       -- decrease height
  --       ["<c-Down>"] = function(win)
  --         win:resize("height", -2)
  --       end,
  --     },
  --   }
  --
  --   if LazyVim.has("neo-tree.nvim") then
  --     local filesystem = "filesystem"
  --     table.insert(opts.left, 1, {
  --       title = "Neo-Tree " .. filesystem:gsub("_", " "):gsub("^%l", string.upper),
  --       ft = "neo-tree",
  --       filter = function(buf)
  --         return vim.b[buf].neo_tree_source == filesystem
  --       end,
  --       pinned = true,
  --       open = function()
  --         vim.cmd(("Neotree show position=%s %s dir=%s"):format("left", filesystem, LazyVim.root()))
  --       end,
  --     })
  --     -- table.insert(opts.left, 3, {
  --     --   title = "Aerial",
  --     --   ft = "aerial",
  --     --   pinned = true,
  --     --   open = "AerialOpen",
  --     -- })
  --
  --     --   table.insert(opts.left, 3, {
  --     --     title = "Trouble",
  --     --     ft = "trouble",
  --     --     pinned = true,
  --     --     open = "Trouble lsp toggle focus=false win.position=left",
  --     --   })
  --   end
  --
  --   for _, pos in ipairs({ "top", "bottom", "left", "right" }) do
  --     opts[pos] = opts[pos] or {}
  --     table.insert(opts[pos], {
  --       ft = "trouble",
  --       filter = function(_buf, win)
  --         return vim.w[win].trouble
  --           and vim.w[win].trouble.position == pos
  --           and vim.w[win].trouble.type == "split"
  --           and vim.w[win].trouble.relative == "editor"
  --           and not vim.w[win].trouble_preview
  --       end,
  --     })
  --   end
  --   return opts
  -- end,
}
